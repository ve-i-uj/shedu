ARG PRE_ASSETS_IMAGE_NAME
FROM ${PRE_ASSETS_IMAGE_NAME} as pre_assets
LABEL maintainer="Aleksei Burov <burov_alexey@mail.ru>"

# Предполагается, что контекст перемещён в папку $KBE_ASSETS_PATH
COPY . /opt/kbengine/assets
WORKDIR /opt/kbengine/assets

ARG KBE_ASSETS_SHA
RUN if [ -d /opt/kbengine/assets/.git ] && [ ! -z "${KBE_ASSETS_SHA}" ]; then \
        git checkout ${KBE_ASSETS_SHA} -b kbe-deploy-branch-${KBE_ASSETS_SHA}; \
    fi

WORKDIR /opt/kbengine/assets

# Модифицируем пользовательский конфиг файл kbe, чтобы работать с сетью docker
ARG KBE_KBENGINE_XML_ARGS
RUN set -a \
    && source .shedu/.env \
    && envsubst < .shedu/data/kbenginexml.data > /tmp/kbenginexml.data \
    && $ENKI_PYTHON /opt/enki/tools/modify_kbe_config.py \
        --kbengine-xml-args=${KBE_KBENGINE_XML_ARGS} \
        --data-file=/tmp/kbenginexml.data \
        --kbe-assets-path=/opt/kbengine/assets

# Добавим атрибуты hasBase, hasCell, hasClient сущности в entities.xml, на
# основе содержания assets'ов. Это нужно делать обязательно, если компоненты
# KBEngine запускать в разных контейнерах.
RUN cp /opt/kbengine/assets/scripts/entities.xml /opt/kbengine/assets/scripts/entities.xml.bak
RUN LOG_LEVEL=INFO \
    ADD_EMPTY_ENTITY_MODULE=true \
    GAME_ASSETS_DIR=/opt/kbengine/assets \
    UPDATED_ENTITIES_XML_PATH=/opt/kbengine/assets/scripts/entities.xml \
    $ENKI_PYTHON /opt/enki/tools/normalize_entitiesxml/main.py

# Подменим настройки логирования KBE своими. GAME_UNIQUE_NAME будет присутствовать
# в пути папки логов
ARG GAME_UNIQUE_NAME
ENV KBE_GAME_NAME=${GAME_UNIQUE_NAME}
RUN rm -rf res/server/log4cxx_properties \
    && cp -r .shedu/data/log4j/log4cxx_properties res/server/log4cxx_properties

ARG KBE_CONTAINER_USER
RUN useradd $KBE_CONTAINER_USER
